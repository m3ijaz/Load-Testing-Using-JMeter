/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 596.0, "minX": 0.0, "maxY": 64448.0, "series": [{"data": [[0.0, 596.0], [0.1, 596.0], [0.2, 637.0], [0.3, 637.0], [0.4, 671.0], [0.5, 780.0], [0.6, 780.0], [0.7, 915.0], [0.8, 915.0], [0.9, 1283.0], [1.0, 1379.0], [1.1, 1379.0], [1.2, 1480.0], [1.3, 1480.0], [1.4, 1483.0], [1.5, 1485.0], [1.6, 1485.0], [1.7, 1601.0], [1.8, 1601.0], [1.9, 1629.0], [2.0, 1659.0], [2.1, 1659.0], [2.2, 1681.0], [2.3, 1681.0], [2.4, 1778.0], [2.5, 1788.0], [2.6, 1788.0], [2.7, 1844.0], [2.8, 1844.0], [2.9, 1859.0], [3.0, 1892.0], [3.1, 1892.0], [3.2, 2068.0], [3.3, 2068.0], [3.4, 2161.0], [3.5, 2178.0], [3.6, 2178.0], [3.7, 2215.0], [3.8, 2215.0], [3.9, 2255.0], [4.0, 2288.0], [4.1, 2288.0], [4.2, 2299.0], [4.3, 2299.0], [4.4, 2304.0], [4.5, 2346.0], [4.6, 2346.0], [4.7, 2362.0], [4.8, 2362.0], [4.9, 2440.0], [5.0, 2466.0], [5.1, 2466.0], [5.2, 2530.0], [5.3, 2530.0], [5.4, 2688.0], [5.5, 2688.0], [5.6, 2883.0], [5.7, 2896.0], [5.8, 2896.0], [5.9, 2957.0], [6.0, 2957.0], [6.1, 3267.0], [6.2, 3290.0], [6.3, 3290.0], [6.4, 3405.0], [6.5, 3405.0], [6.6, 3428.0], [6.7, 3464.0], [6.8, 3464.0], [6.9, 3504.0], [7.0, 3504.0], [7.1, 3514.0], [7.2, 3812.0], [7.3, 3812.0], [7.4, 3927.0], [7.5, 3927.0], [7.6, 3941.0], [7.7, 3971.0], [7.8, 3971.0], [7.9, 4021.0], [8.0, 4021.0], [8.1, 4102.0], [8.2, 4196.0], [8.3, 4196.0], [8.4, 4286.0], [8.5, 4286.0], [8.6, 4370.0], [8.7, 4472.0], [8.8, 4472.0], [8.9, 4562.0], [9.0, 4562.0], [9.1, 4568.0], [9.2, 4590.0], [9.3, 4590.0], [9.4, 4630.0], [9.5, 4650.0], [9.6, 4650.0], [9.7, 4653.0], [9.8, 4653.0], [9.9, 4675.0], [10.0, 4708.0], [10.1, 4708.0], [10.2, 4733.0], [10.3, 4733.0], [10.4, 4965.0], [10.5, 4986.0], [10.6, 4986.0], [10.7, 4999.0], [10.8, 4999.0], [10.9, 5003.0], [11.0, 5054.0], [11.1, 5054.0], [11.2, 5072.0], [11.3, 5072.0], [11.4, 5177.0], [11.5, 5236.0], [11.6, 5236.0], [11.7, 5347.0], [11.8, 5347.0], [11.9, 5361.0], [12.0, 5566.0], [12.1, 5566.0], [12.2, 5716.0], [12.3, 5716.0], [12.4, 5732.0], [12.5, 5762.0], [12.6, 5762.0], [12.7, 5945.0], [12.8, 5945.0], [12.9, 5968.0], [13.0, 6163.0], [13.1, 6163.0], [13.2, 6182.0], [13.3, 6182.0], [13.4, 6185.0], [13.5, 6240.0], [13.6, 6240.0], [13.7, 6256.0], [13.8, 6256.0], [13.9, 6301.0], [14.0, 6377.0], [14.1, 6377.0], [14.2, 6389.0], [14.3, 6389.0], [14.4, 6402.0], [14.5, 6527.0], [14.6, 6527.0], [14.7, 6568.0], [14.8, 6568.0], [14.9, 6579.0], [15.0, 6631.0], [15.1, 6631.0], [15.2, 6688.0], [15.3, 6688.0], [15.4, 6710.0], [15.5, 6851.0], [15.6, 6851.0], [15.7, 6879.0], [15.8, 6879.0], [15.9, 6903.0], [16.0, 7127.0], [16.1, 7127.0], [16.2, 7214.0], [16.3, 7214.0], [16.4, 7252.0], [16.5, 7326.0], [16.6, 7326.0], [16.7, 7368.0], [16.8, 7368.0], [16.9, 7411.0], [17.0, 7473.0], [17.1, 7473.0], [17.2, 7676.0], [17.3, 7676.0], [17.4, 7678.0], [17.5, 7679.0], [17.6, 7679.0], [17.7, 7751.0], [17.8, 7751.0], [17.9, 7871.0], [18.0, 7992.0], [18.1, 7992.0], [18.2, 8080.0], [18.3, 8080.0], [18.4, 8085.0], [18.5, 8172.0], [18.6, 8172.0], [18.7, 8232.0], [18.8, 8232.0], [18.9, 8294.0], [19.0, 8404.0], [19.1, 8404.0], [19.2, 8425.0], [19.3, 8425.0], [19.4, 8432.0], [19.5, 8516.0], [19.6, 8516.0], [19.7, 8565.0], [19.8, 8565.0], [19.9, 8648.0], [20.0, 8648.0], [20.1, 8864.0], [20.2, 8867.0], [20.3, 8867.0], [20.4, 8887.0], [20.5, 8887.0], [20.6, 8976.0], [20.7, 9100.0], [20.8, 9100.0], [20.9, 9103.0], [21.0, 9103.0], [21.1, 9185.0], [21.2, 9242.0], [21.3, 9242.0], [21.4, 9244.0], [21.5, 9244.0], [21.6, 9256.0], [21.7, 9332.0], [21.8, 9332.0], [21.9, 9378.0], [22.0, 9378.0], [22.1, 9483.0], [22.2, 9515.0], [22.3, 9515.0], [22.4, 9650.0], [22.5, 9650.0], [22.6, 9710.0], [22.7, 9815.0], [22.8, 9815.0], [22.9, 9855.0], [23.0, 9855.0], [23.1, 9877.0], [23.2, 9924.0], [23.3, 9924.0], [23.4, 9937.0], [23.5, 9937.0], [23.6, 10013.0], [23.7, 10067.0], [23.8, 10067.0], [23.9, 10095.0], [24.0, 10095.0], [24.1, 10103.0], [24.2, 10154.0], [24.3, 10154.0], [24.4, 10187.0], [24.5, 10187.0], [24.6, 10191.0], [24.7, 10222.0], [24.8, 10222.0], [24.9, 10222.0], [25.0, 10222.0], [25.1, 10249.0], [25.2, 10307.0], [25.3, 10307.0], [25.4, 10361.0], [25.5, 10361.0], [25.6, 10376.0], [25.7, 10472.0], [25.8, 10472.0], [25.9, 10762.0], [26.0, 10762.0], [26.1, 10844.0], [26.2, 10856.0], [26.3, 10856.0], [26.4, 11009.0], [26.5, 11009.0], [26.6, 11013.0], [26.7, 11180.0], [26.8, 11180.0], [26.9, 11371.0], [27.0, 11371.0], [27.1, 11414.0], [27.2, 11517.0], [27.3, 11517.0], [27.4, 11519.0], [27.5, 11519.0], [27.6, 11551.0], [27.7, 11582.0], [27.8, 11582.0], [27.9, 11636.0], [28.0, 11636.0], [28.1, 11637.0], [28.2, 11775.0], [28.3, 11775.0], [28.4, 11782.0], [28.5, 11782.0], [28.6, 11826.0], [28.7, 11860.0], [28.8, 11860.0], [28.9, 11883.0], [29.0, 11883.0], [29.1, 11886.0], [29.2, 11912.0], [29.3, 11912.0], [29.4, 11975.0], [29.5, 11975.0], [29.6, 12035.0], [29.7, 12045.0], [29.8, 12045.0], [29.9, 12078.0], [30.0, 12078.0], [30.1, 12087.0], [30.2, 12091.0], [30.3, 12091.0], [30.4, 12132.0], [30.5, 12132.0], [30.6, 12165.0], [30.7, 12219.0], [30.8, 12219.0], [30.9, 12226.0], [31.0, 12226.0], [31.1, 12276.0], [31.2, 12285.0], [31.3, 12285.0], [31.4, 12452.0], [31.5, 12452.0], [31.6, 12467.0], [31.7, 12524.0], [31.8, 12524.0], [31.9, 12529.0], [32.0, 12529.0], [32.1, 12655.0], [32.2, 12816.0], [32.3, 12816.0], [32.4, 12823.0], [32.5, 12823.0], [32.6, 12895.0], [32.7, 12946.0], [32.8, 12946.0], [32.9, 12955.0], [33.0, 12955.0], [33.1, 12956.0], [33.2, 13042.0], [33.3, 13042.0], [33.4, 13101.0], [33.5, 13101.0], [33.6, 13215.0], [33.7, 13264.0], [33.8, 13264.0], [33.9, 13269.0], [34.0, 13269.0], [34.1, 13343.0], [34.2, 13398.0], [34.3, 13398.0], [34.4, 13399.0], [34.5, 13399.0], [34.6, 13423.0], [34.7, 13441.0], [34.8, 13441.0], [34.9, 13455.0], [35.0, 13455.0], [35.1, 13558.0], [35.2, 13605.0], [35.3, 13605.0], [35.4, 13670.0], [35.5, 13670.0], [35.6, 13706.0], [35.7, 13755.0], [35.8, 13755.0], [35.9, 13792.0], [36.0, 13792.0], [36.1, 13960.0], [36.2, 13976.0], [36.3, 13976.0], [36.4, 13978.0], [36.5, 13978.0], [36.6, 14111.0], [36.7, 14140.0], [36.8, 14140.0], [36.9, 14175.0], [37.0, 14175.0], [37.1, 14197.0], [37.2, 14249.0], [37.3, 14249.0], [37.4, 14257.0], [37.5, 14257.0], [37.6, 14274.0], [37.7, 14299.0], [37.8, 14299.0], [37.9, 14336.0], [38.0, 14444.0], [38.1, 14444.0], [38.2, 14490.0], [38.3, 14490.0], [38.4, 14497.0], [38.5, 14518.0], [38.6, 14518.0], [38.7, 14671.0], [38.8, 14671.0], [38.9, 14677.0], [39.0, 14739.0], [39.1, 14739.0], [39.2, 14792.0], [39.3, 14792.0], [39.4, 15049.0], [39.5, 15075.0], [39.6, 15075.0], [39.7, 15097.0], [39.8, 15097.0], [39.9, 15145.0], [40.0, 15146.0], [40.1, 15146.0], [40.2, 15165.0], [40.3, 15165.0], [40.4, 15178.0], [40.5, 15258.0], [40.6, 15258.0], [40.7, 15265.0], [40.8, 15265.0], [40.9, 15293.0], [41.0, 15343.0], [41.1, 15343.0], [41.2, 15401.0], [41.3, 15401.0], [41.4, 15438.0], [41.5, 15444.0], [41.6, 15444.0], [41.7, 15564.0], [41.8, 15564.0], [41.9, 15635.0], [42.0, 15670.0], [42.1, 15670.0], [42.2, 15823.0], [42.3, 15823.0], [42.4, 15906.0], [42.5, 15917.0], [42.6, 15917.0], [42.7, 15996.0], [42.8, 15996.0], [42.9, 16007.0], [43.0, 16047.0], [43.1, 16047.0], [43.2, 16059.0], [43.3, 16059.0], [43.4, 16342.0], [43.5, 16348.0], [43.6, 16348.0], [43.7, 16442.0], [43.8, 16442.0], [43.9, 16484.0], [44.0, 16541.0], [44.1, 16541.0], [44.2, 16570.0], [44.3, 16570.0], [44.4, 16603.0], [44.5, 16645.0], [44.6, 16645.0], [44.7, 16680.0], [44.8, 16680.0], [44.9, 16687.0], [45.0, 16687.0], [45.1, 16687.0], [45.2, 16824.0], [45.3, 16824.0], [45.4, 16878.0], [45.5, 16892.0], [45.6, 16892.0], [45.7, 16912.0], [45.8, 16912.0], [45.9, 16912.0], [46.0, 16930.0], [46.1, 16930.0], [46.2, 16941.0], [46.3, 16941.0], [46.4, 16967.0], [46.5, 17061.0], [46.6, 17061.0], [46.7, 17123.0], [46.8, 17123.0], [46.9, 17130.0], [47.0, 17131.0], [47.1, 17131.0], [47.2, 17148.0], [47.3, 17148.0], [47.4, 17175.0], [47.5, 17189.0], [47.6, 17189.0], [47.7, 17257.0], [47.8, 17257.0], [47.9, 17370.0], [48.0, 17391.0], [48.1, 17391.0], [48.2, 17403.0], [48.3, 17403.0], [48.4, 17414.0], [48.5, 17422.0], [48.6, 17422.0], [48.7, 17446.0], [48.8, 17446.0], [48.9, 17464.0], [49.0, 17487.0], [49.1, 17487.0], [49.2, 17518.0], [49.3, 17518.0], [49.4, 17539.0], [49.5, 17590.0], [49.6, 17590.0], [49.7, 17635.0], [49.8, 17635.0], [49.9, 17659.0], [50.0, 17696.0], [50.1, 17696.0], [50.2, 17732.0], [50.3, 17732.0], [50.4, 17736.0], [50.5, 17846.0], [50.6, 17846.0], [50.7, 17871.0], [50.8, 17871.0], [50.9, 17883.0], [51.0, 17902.0], [51.1, 17902.0], [51.2, 17972.0], [51.3, 17972.0], [51.4, 18041.0], [51.5, 18049.0], [51.6, 18049.0], [51.7, 18087.0], [51.8, 18087.0], [51.9, 18097.0], [52.0, 18106.0], [52.1, 18106.0], [52.2, 18134.0], [52.3, 18134.0], [52.4, 18140.0], [52.5, 18159.0], [52.6, 18159.0], [52.7, 18241.0], [52.8, 18241.0], [52.9, 18260.0], [53.0, 18429.0], [53.1, 18429.0], [53.2, 18439.0], [53.3, 18439.0], [53.4, 18471.0], [53.5, 18504.0], [53.6, 18504.0], [53.7, 18606.0], [53.8, 18606.0], [53.9, 18630.0], [54.0, 18641.0], [54.1, 18641.0], [54.2, 18774.0], [54.3, 18774.0], [54.4, 18805.0], [54.5, 18818.0], [54.6, 18818.0], [54.7, 18829.0], [54.8, 18829.0], [54.9, 18842.0], [55.0, 18856.0], [55.1, 18856.0], [55.2, 18898.0], [55.3, 18898.0], [55.4, 18921.0], [55.5, 19185.0], [55.6, 19185.0], [55.7, 19194.0], [55.8, 19194.0], [55.9, 19278.0], [56.0, 19291.0], [56.1, 19291.0], [56.2, 19367.0], [56.3, 19367.0], [56.4, 19394.0], [56.5, 19438.0], [56.6, 19438.0], [56.7, 19520.0], [56.8, 19520.0], [56.9, 19532.0], [57.0, 19532.0], [57.1, 19532.0], [57.2, 19558.0], [57.3, 19558.0], [57.4, 19572.0], [57.5, 19586.0], [57.6, 19586.0], [57.7, 19587.0], [57.8, 19587.0], [57.9, 19701.0], [58.0, 19742.0], [58.1, 19742.0], [58.2, 19748.0], [58.3, 19748.0], [58.4, 19841.0], [58.5, 19965.0], [58.6, 19965.0], [58.7, 20127.0], [58.8, 20127.0], [58.9, 20128.0], [59.0, 20137.0], [59.1, 20137.0], [59.2, 20148.0], [59.3, 20148.0], [59.4, 20158.0], [59.5, 20225.0], [59.6, 20225.0], [59.7, 20297.0], [59.8, 20297.0], [59.9, 20388.0], [60.0, 20438.0], [60.1, 20438.0], [60.2, 20460.0], [60.3, 20460.0], [60.4, 20505.0], [60.5, 20551.0], [60.6, 20551.0], [60.7, 20631.0], [60.8, 20631.0], [60.9, 20795.0], [61.0, 20797.0], [61.1, 20797.0], [61.2, 20825.0], [61.3, 20825.0], [61.4, 20875.0], [61.5, 20879.0], [61.6, 20879.0], [61.7, 20959.0], [61.8, 20959.0], [61.9, 20993.0], [62.0, 21018.0], [62.1, 21018.0], [62.2, 21024.0], [62.3, 21024.0], [62.4, 21027.0], [62.5, 21028.0], [62.6, 21028.0], [62.7, 21059.0], [62.8, 21059.0], [62.9, 21102.0], [63.0, 21190.0], [63.1, 21190.0], [63.2, 21214.0], [63.3, 21214.0], [63.4, 21235.0], [63.5, 21248.0], [63.6, 21248.0], [63.7, 21357.0], [63.8, 21357.0], [63.9, 21390.0], [64.0, 21479.0], [64.1, 21479.0], [64.2, 21523.0], [64.3, 21523.0], [64.4, 21643.0], [64.5, 21644.0], [64.6, 21644.0], [64.7, 21659.0], [64.8, 21659.0], [64.9, 21708.0], [65.0, 21718.0], [65.1, 21718.0], [65.2, 21906.0], [65.3, 21906.0], [65.4, 21924.0], [65.5, 21938.0], [65.6, 21938.0], [65.7, 22013.0], [65.8, 22013.0], [65.9, 22153.0], [66.0, 22171.0], [66.1, 22171.0], [66.2, 22232.0], [66.3, 22232.0], [66.4, 22245.0], [66.5, 22263.0], [66.6, 22263.0], [66.7, 22299.0], [66.8, 22299.0], [66.9, 22431.0], [67.0, 22432.0], [67.1, 22432.0], [67.2, 22474.0], [67.3, 22474.0], [67.4, 22474.0], [67.5, 22480.0], [67.6, 22480.0], [67.7, 22482.0], [67.8, 22482.0], [67.9, 22589.0], [68.0, 22594.0], [68.1, 22594.0], [68.2, 22710.0], [68.3, 22710.0], [68.4, 22748.0], [68.5, 22802.0], [68.6, 22802.0], [68.7, 22818.0], [68.8, 22818.0], [68.9, 22849.0], [69.0, 22960.0], [69.1, 22960.0], [69.2, 22960.0], [69.3, 22960.0], [69.4, 23034.0], [69.5, 23045.0], [69.6, 23045.0], [69.7, 23103.0], [69.8, 23103.0], [69.9, 23161.0], [70.0, 23161.0], [70.1, 23161.0], [70.2, 23222.0], [70.3, 23222.0], [70.4, 23304.0], [70.5, 23361.0], [70.6, 23361.0], [70.7, 23373.0], [70.8, 23373.0], [70.9, 23516.0], [71.0, 23584.0], [71.1, 23584.0], [71.2, 23586.0], [71.3, 23586.0], [71.4, 23622.0], [71.5, 23635.0], [71.6, 23635.0], [71.7, 23654.0], [71.8, 23654.0], [71.9, 23717.0], [72.0, 23926.0], [72.1, 23926.0], [72.2, 23995.0], [72.3, 23995.0], [72.4, 24179.0], [72.5, 24214.0], [72.6, 24214.0], [72.7, 24447.0], [72.8, 24447.0], [72.9, 24458.0], [73.0, 24472.0], [73.1, 24472.0], [73.2, 24483.0], [73.3, 24483.0], [73.4, 24572.0], [73.5, 24615.0], [73.6, 24615.0], [73.7, 24625.0], [73.8, 24625.0], [73.9, 24644.0], [74.0, 24666.0], [74.1, 24666.0], [74.2, 24685.0], [74.3, 24685.0], [74.4, 24719.0], [74.5, 24735.0], [74.6, 24735.0], [74.7, 24802.0], [74.8, 24802.0], [74.9, 24813.0], [75.0, 24836.0], [75.1, 24836.0], [75.2, 24918.0], [75.3, 24918.0], [75.4, 24932.0], [75.5, 24990.0], [75.6, 24990.0], [75.7, 24994.0], [75.8, 24994.0], [75.9, 25043.0], [76.0, 25136.0], [76.1, 25136.0], [76.2, 25253.0], [76.3, 25253.0], [76.4, 25285.0], [76.5, 25595.0], [76.6, 25595.0], [76.7, 25646.0], [76.8, 25646.0], [76.9, 25712.0], [77.0, 25981.0], [77.1, 25981.0], [77.2, 25994.0], [77.3, 25994.0], [77.4, 26035.0], [77.5, 26063.0], [77.6, 26063.0], [77.7, 26141.0], [77.8, 26141.0], [77.9, 26181.0], [78.0, 26231.0], [78.1, 26231.0], [78.2, 26348.0], [78.3, 26348.0], [78.4, 26467.0], [78.5, 26467.0], [78.6, 26518.0], [78.7, 26653.0], [78.8, 26653.0], [78.9, 26678.0], [79.0, 26678.0], [79.1, 26694.0], [79.2, 26748.0], [79.3, 26748.0], [79.4, 26788.0], [79.5, 26788.0], [79.6, 26826.0], [79.7, 26883.0], [79.8, 26883.0], [79.9, 26904.0], [80.0, 26904.0], [80.1, 27101.0], [80.2, 27154.0], [80.3, 27154.0], [80.4, 27170.0], [80.5, 27170.0], [80.6, 27199.0], [80.7, 27228.0], [80.8, 27228.0], [80.9, 27302.0], [81.0, 27302.0], [81.1, 27363.0], [81.2, 27392.0], [81.3, 27392.0], [81.4, 27402.0], [81.5, 27402.0], [81.6, 27442.0], [81.7, 27569.0], [81.8, 27569.0], [81.9, 27677.0], [82.0, 27677.0], [82.1, 27692.0], [82.2, 27720.0], [82.3, 27720.0], [82.4, 27950.0], [82.5, 27950.0], [82.6, 28045.0], [82.7, 28208.0], [82.8, 28208.0], [82.9, 28217.0], [83.0, 28217.0], [83.1, 28299.0], [83.2, 28373.0], [83.3, 28373.0], [83.4, 28390.0], [83.5, 28390.0], [83.6, 28393.0], [83.7, 28401.0], [83.8, 28401.0], [83.9, 28438.0], [84.0, 28438.0], [84.1, 28496.0], [84.2, 28602.0], [84.3, 28602.0], [84.4, 28629.0], [84.5, 28629.0], [84.6, 28852.0], [84.7, 28993.0], [84.8, 28993.0], [84.9, 29515.0], [85.0, 29515.0], [85.1, 29531.0], [85.2, 29547.0], [85.3, 29547.0], [85.4, 29564.0], [85.5, 29564.0], [85.6, 29574.0], [85.7, 29585.0], [85.8, 29585.0], [85.9, 29629.0], [86.0, 29629.0], [86.1, 29686.0], [86.2, 29727.0], [86.3, 29727.0], [86.4, 29958.0], [86.5, 29958.0], [86.6, 30089.0], [86.7, 30113.0], [86.8, 30113.0], [86.9, 30327.0], [87.0, 30327.0], [87.1, 30376.0], [87.2, 30396.0], [87.3, 30396.0], [87.4, 30561.0], [87.5, 30561.0], [87.6, 30817.0], [87.7, 30837.0], [87.8, 30837.0], [87.9, 30839.0], [88.0, 30839.0], [88.1, 30840.0], [88.2, 31204.0], [88.3, 31204.0], [88.4, 31460.0], [88.5, 31460.0], [88.6, 31726.0], [88.7, 31728.0], [88.8, 31728.0], [88.9, 32008.0], [89.0, 32008.0], [89.1, 32156.0], [89.2, 32192.0], [89.3, 32192.0], [89.4, 32197.0], [89.5, 32197.0], [89.6, 32278.0], [89.7, 32293.0], [89.8, 32293.0], [89.9, 32336.0], [90.0, 32336.0], [90.1, 32452.0], [90.2, 32806.0], [90.3, 32806.0], [90.4, 33134.0], [90.5, 33134.0], [90.6, 33205.0], [90.7, 33329.0], [90.8, 33329.0], [90.9, 33349.0], [91.0, 33349.0], [91.1, 33426.0], [91.2, 33562.0], [91.3, 33562.0], [91.4, 33846.0], [91.5, 33846.0], [91.6, 33860.0], [91.7, 33881.0], [91.8, 33881.0], [91.9, 33976.0], [92.0, 33976.0], [92.1, 34303.0], [92.2, 34327.0], [92.3, 34327.0], [92.4, 34351.0], [92.5, 34351.0], [92.6, 34384.0], [92.7, 34465.0], [92.8, 34465.0], [92.9, 34539.0], [93.0, 34539.0], [93.1, 34629.0], [93.2, 34816.0], [93.3, 34816.0], [93.4, 35442.0], [93.5, 35442.0], [93.6, 35921.0], [93.7, 36261.0], [93.8, 36261.0], [93.9, 36419.0], [94.0, 36419.0], [94.1, 36681.0], [94.2, 36717.0], [94.3, 36717.0], [94.4, 37238.0], [94.5, 37238.0], [94.6, 37379.0], [94.7, 37450.0], [94.8, 37450.0], [94.9, 37619.0], [95.0, 37619.0], [95.1, 37907.0], [95.2, 38550.0], [95.3, 38550.0], [95.4, 39320.0], [95.5, 39320.0], [95.6, 39358.0], [95.7, 39536.0], [95.8, 39536.0], [95.9, 40459.0], [96.0, 40459.0], [96.1, 41421.0], [96.2, 42401.0], [96.3, 42401.0], [96.4, 43250.0], [96.5, 43250.0], [96.6, 44052.0], [96.7, 44091.0], [96.8, 44091.0], [96.9, 44648.0], [97.0, 44648.0], [97.1, 44803.0], [97.2, 44820.0], [97.3, 44820.0], [97.4, 45149.0], [97.5, 45149.0], [97.6, 45195.0], [97.7, 46157.0], [97.8, 46157.0], [97.9, 47544.0], [98.0, 47544.0], [98.1, 48080.0], [98.2, 48663.0], [98.3, 48663.0], [98.4, 50231.0], [98.5, 50231.0], [98.6, 50904.0], [98.7, 52254.0], [98.8, 52254.0], [98.9, 52290.0], [99.0, 52290.0], [99.1, 52440.0], [99.2, 53976.0], [99.3, 53976.0], [99.4, 56901.0], [99.5, 56901.0], [99.6, 58183.0], [99.7, 63764.0], [99.8, 63764.0], [99.9, 64448.0], [100.0, 64448.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 7.0, "series": [{"data": [[33300.0, 2.0], [34500.0, 1.0], [38500.0, 1.0], [37300.0, 1.0], [39300.0, 2.0], [46100.0, 1.0], [50900.0, 1.0], [56900.0, 1.0], [58100.0, 1.0], [63700.0, 1.0], [500.0, 1.0], [600.0, 2.0], [700.0, 1.0], [900.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 3.0], [1600.0, 4.0], [1700.0, 2.0], [1800.0, 3.0], [2000.0, 1.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 2.0], [2900.0, 1.0], [3200.0, 2.0], [3400.0, 3.0], [3500.0, 2.0], [3800.0, 1.0], [3900.0, 3.0], [4000.0, 1.0], [4200.0, 1.0], [4100.0, 2.0], [4300.0, 1.0], [4600.0, 4.0], [4400.0, 1.0], [4500.0, 3.0], [4700.0, 2.0], [4900.0, 3.0], [5000.0, 3.0], [5100.0, 1.0], [5300.0, 2.0], [5200.0, 1.0], [5500.0, 1.0], [5700.0, 3.0], [5900.0, 2.0], [6100.0, 3.0], [6300.0, 3.0], [6200.0, 2.0], [6500.0, 3.0], [6600.0, 2.0], [6400.0, 1.0], [6800.0, 2.0], [6900.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7400.0, 2.0], [7200.0, 2.0], [7300.0, 2.0], [7600.0, 3.0], [7700.0, 1.0], [7800.0, 1.0], [7900.0, 1.0], [8000.0, 2.0], [8100.0, 1.0], [8400.0, 3.0], [8500.0, 2.0], [8200.0, 2.0], [8600.0, 1.0], [8800.0, 3.0], [9100.0, 3.0], [8900.0, 1.0], [9200.0, 3.0], [9700.0, 1.0], [9400.0, 1.0], [9600.0, 1.0], [9300.0, 2.0], [9500.0, 1.0], [9800.0, 3.0], [9900.0, 2.0], [10100.0, 4.0], [10000.0, 3.0], [10200.0, 3.0], [10300.0, 3.0], [10400.0, 1.0], [10700.0, 1.0], [11000.0, 2.0], [10800.0, 2.0], [11100.0, 1.0], [11700.0, 2.0], [11600.0, 2.0], [11500.0, 4.0], [11400.0, 1.0], [11300.0, 1.0], [12200.0, 4.0], [11800.0, 4.0], [12000.0, 5.0], [11900.0, 2.0], [12100.0, 2.0], [12500.0, 2.0], [12400.0, 2.0], [12600.0, 1.0], [12800.0, 3.0], [12900.0, 3.0], [13100.0, 1.0], [13300.0, 3.0], [13200.0, 3.0], [13000.0, 1.0], [13700.0, 3.0], [13400.0, 3.0], [13600.0, 2.0], [13500.0, 1.0], [14300.0, 1.0], [13900.0, 3.0], [14100.0, 4.0], [14200.0, 4.0], [14600.0, 2.0], [14500.0, 1.0], [14400.0, 3.0], [14700.0, 2.0], [15100.0, 4.0], [15200.0, 3.0], [15300.0, 1.0], [15000.0, 3.0], [15400.0, 3.0], [15800.0, 1.0], [15600.0, 2.0], [15500.0, 1.0], [16000.0, 3.0], [16300.0, 2.0], [15900.0, 3.0], [16600.0, 5.0], [16400.0, 2.0], [17400.0, 6.0], [17200.0, 1.0], [16800.0, 3.0], [17000.0, 1.0], [18400.0, 3.0], [18000.0, 4.0], [17600.0, 3.0], [18200.0, 2.0], [17800.0, 3.0], [18800.0, 6.0], [18600.0, 3.0], [19200.0, 2.0], [19400.0, 1.0], [20200.0, 2.0], [20400.0, 2.0], [19800.0, 1.0], [20800.0, 3.0], [21200.0, 3.0], [21000.0, 5.0], [20600.0, 1.0], [21400.0, 1.0], [21600.0, 3.0], [22400.0, 6.0], [22200.0, 4.0], [22000.0, 1.0], [22800.0, 3.0], [23200.0, 1.0], [23000.0, 2.0], [23600.0, 3.0], [24400.0, 4.0], [24200.0, 1.0], [24600.0, 5.0], [24800.0, 3.0], [25200.0, 2.0], [25000.0, 1.0], [25600.0, 1.0], [26000.0, 2.0], [26200.0, 1.0], [26400.0, 1.0], [26600.0, 3.0], [27600.0, 2.0], [26800.0, 2.0], [27200.0, 1.0], [27400.0, 2.0], [28000.0, 1.0], [28400.0, 3.0], [28600.0, 2.0], [28200.0, 3.0], [29600.0, 2.0], [28800.0, 1.0], [30000.0, 1.0], [30800.0, 4.0], [31200.0, 1.0], [31400.0, 1.0], [32400.0, 1.0], [32200.0, 2.0], [32000.0, 1.0], [34800.0, 1.0], [32800.0, 1.0], [34400.0, 1.0], [33200.0, 1.0], [36400.0, 1.0], [37600.0, 1.0], [37200.0, 1.0], [40400.0, 1.0], [42400.0, 1.0], [44800.0, 2.0], [44000.0, 2.0], [43200.0, 1.0], [48000.0, 1.0], [52400.0, 1.0], [64400.0, 1.0], [33100.0, 1.0], [34300.0, 4.0], [33900.0, 1.0], [33500.0, 1.0], [36700.0, 1.0], [35900.0, 1.0], [37900.0, 1.0], [39500.0, 1.0], [45100.0, 2.0], [47500.0, 1.0], [53900.0, 1.0], [17100.0, 6.0], [16900.0, 5.0], [16500.0, 2.0], [17300.0, 2.0], [18100.0, 4.0], [17900.0, 2.0], [17700.0, 2.0], [17500.0, 3.0], [18900.0, 1.0], [19300.0, 2.0], [18700.0, 1.0], [19100.0, 2.0], [18500.0, 1.0], [19500.0, 7.0], [19700.0, 3.0], [20100.0, 5.0], [20300.0, 1.0], [19900.0, 1.0], [21300.0, 2.0], [20900.0, 2.0], [20700.0, 2.0], [21100.0, 2.0], [20500.0, 2.0], [21500.0, 1.0], [21700.0, 2.0], [22100.0, 2.0], [21900.0, 3.0], [22500.0, 2.0], [23300.0, 3.0], [22700.0, 2.0], [23500.0, 3.0], [22900.0, 2.0], [23100.0, 3.0], [23900.0, 2.0], [23700.0, 1.0], [24500.0, 1.0], [24100.0, 1.0], [24700.0, 2.0], [24900.0, 4.0], [25100.0, 1.0], [25500.0, 1.0], [25900.0, 2.0], [26100.0, 2.0], [26300.0, 1.0], [26500.0, 1.0], [25700.0, 1.0], [27100.0, 4.0], [27300.0, 3.0], [27500.0, 1.0], [26900.0, 1.0], [26700.0, 2.0], [27700.0, 1.0], [28300.0, 3.0], [27900.0, 1.0], [29500.0, 6.0], [28900.0, 1.0], [30300.0, 3.0], [30500.0, 1.0], [30100.0, 1.0], [29900.0, 1.0], [29700.0, 1.0], [31700.0, 2.0], [32300.0, 1.0], [32100.0, 3.0], [34600.0, 1.0], [33800.0, 3.0], [33400.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [36600.0, 1.0], [37400.0, 1.0], [41400.0, 1.0], [44600.0, 1.0], [48600.0, 1.0], [50200.0, 1.0], [52200.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 588.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 588.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 97.24576271186443, "minX": 1.6913217E12, "maxY": 163.00829875518656, "series": [{"data": [[1.69132176E12, 163.00829875518656], [1.6913217E12, 97.24576271186443]], "isOverall": false, "label": "Evaly", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69132176E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 671.0, "minX": 1.0, "maxY": 63764.0, "series": [{"data": [[2.0, 32681.5], [3.0, 24650.0], [4.0, 671.0], [5.0, 780.0], [6.0, 32499.333333333336], [7.0, 1659.0], [8.0, 26861.5], [9.0, 14257.0], [10.0, 56901.0], [11.0, 6710.0], [12.0, 4562.0], [13.0, 3514.0], [14.0, 9332.0], [15.0, 6182.0], [16.0, 13042.0], [17.0, 2466.0], [18.0, 9937.0], [20.0, 14536.5], [21.0, 2157.5], [22.0, 3479.5], [23.0, 4378.0], [24.0, 6518.0], [25.0, 16645.0], [27.0, 14909.0], [28.0, 12983.5], [29.0, 8404.0], [30.0, 15635.0], [31.0, 18641.0], [33.0, 7780.0], [32.0, 18134.0], [35.0, 34281.5], [34.0, 10844.0], [37.0, 4568.0], [36.0, 9244.0], [38.0, 2006.5], [39.0, 6237.5], [41.0, 13784.0], [40.0, 5283.8], [42.0, 2838.2], [43.0, 10222.0], [45.0, 13605.0], [44.0, 8887.0], [46.0, 4891.5], [47.0, 6301.0], [48.0, 5164.5], [49.0, 12452.0], [50.0, 5337.5], [51.0, 19278.0], [52.0, 20340.666666666664], [53.0, 10219.333333333332], [54.0, 10941.0], [55.0, 8166.0], [56.0, 14094.5], [57.0, 4684.5], [58.0, 8392.5], [59.0, 2215.0], [61.0, 14197.0], [60.0, 5072.0], [63.0, 4893.25], [62.0, 21018.0], [64.0, 11553.0], [67.0, 21146.0], [66.0, 35695.0], [65.0, 36488.5], [71.0, 7641.0], [70.0, 4675.0], [69.0, 39320.0], [68.0, 15564.0], [73.0, 11884.666666666668], [75.0, 2896.0], [74.0, 12655.0], [72.0, 8864.0], [79.0, 36574.5], [78.0, 16912.0], [77.0, 22960.0], [76.0, 18041.0], [82.0, 9196.2], [83.0, 12312.0], [80.0, 17846.0], [85.0, 17910.0], [86.0, 13840.5], [87.0, 11826.0], [84.0, 6903.0], [90.0, 22231.666666666668], [91.0, 15917.0], [89.0, 36484.0], [88.0, 20505.0], [94.0, 8986.666666666666], [95.0, 5215.0], [93.0, 8080.0], [92.0, 12529.0], [96.0, 11999.0], [99.0, 22742.0], [98.0, 26748.0], [97.0, 17148.0], [100.0, 8134.5], [101.0, 14447.5], [102.0, 9840.0], [103.0, 22482.0], [105.0, 12722.166666666668], [107.0, 30189.666666666668], [106.0, 10249.0], [104.0, 10361.0], [108.0, 16930.5], [110.0, 9256.333333333334], [109.0, 20939.2], [111.0, 12534.5], [115.0, 13558.0], [114.0, 17422.0], [113.0, 16824.0], [112.0, 18842.0], [116.0, 18713.0], [119.0, 28091.666666666668], [118.0, 29043.333333333332], [117.0, 29039.5], [121.0, 22658.333333333332], [123.0, 20128.0], [122.0, 14490.0], [120.0, 14175.0], [124.0, 10149.0], [127.0, 22771.0], [126.0, 19572.0], [125.0, 31179.5], [130.0, 15900.5], [131.0, 12770.5], [133.0, 10503.0], [135.0, 10998.5], [134.0, 14739.0], [132.0, 12276.0], [129.0, 11371.0], [128.0, 45195.0], [137.0, 22718.0], [140.0, 22791.333333333332], [139.0, 10031.0], [141.0, 11070.666666666666], [143.0, 25324.0], [142.0, 23361.0], [138.0, 15996.0], [136.0, 12078.0], [144.0, 13685.0], [145.0, 18350.5], [147.0, 10443.5], [149.0, 13135.0], [151.0, 21248.0], [150.0, 22594.0], [148.0, 20993.0], [146.0, 32961.0], [152.0, 23223.8], [153.0, 9577.0], [154.0, 18170.333333333332], [156.0, 21155.0], [159.0, 12025.5], [158.0, 15097.0], [157.0, 20230.0], [155.0, 13670.0], [160.0, 17023.5], [161.0, 11021.0], [162.0, 13028.0], [165.0, 21744.0], [167.0, 27688.0], [166.0, 24990.0], [164.0, 22480.0], [163.0, 23586.0], [168.0, 16247.5], [169.0, 12980.333333333334], [175.0, 22309.0], [174.0, 17175.0], [173.0, 18241.0], [172.0, 24738.5], [171.0, 36122.5], [170.0, 30388.2], [176.0, 13511.666666666666], [178.0, 23942.75], [180.0, 9795.0], [183.0, 28637.25], [182.0, 27751.0], [181.0, 17061.0], [179.0, 22474.0], [177.0, 14671.0], [189.0, 18122.333333333332], [190.0, 23644.0], [191.0, 24836.0], [188.0, 34629.0], [187.0, 13441.0], [186.0, 27242.0], [185.0, 27341.25], [184.0, 29459.0], [199.0, 21718.0], [198.0, 31627.0], [197.0, 33976.0], [196.0, 28533.0], [195.0, 28993.0], [194.0, 27170.0], [193.0, 24392.0], [192.0, 8172.0], [204.0, 21786.0], [205.0, 15168.5], [207.0, 20900.0], [206.0, 24615.0], [203.0, 22382.5], [202.0, 15258.0], [201.0, 21977.333333333332], [200.0, 31618.666666666668], [208.0, 19200.0], [214.0, 21502.0], [213.0, 17534.666666666668], [215.0, 22758.0], [212.0, 25510.0], [211.0, 25229.0], [210.0, 23756.0], [209.0, 25227.666666666664], [217.0, 22403.2], [219.0, 16793.5], [223.0, 23530.5], [222.0, 28393.5], [221.0, 21825.6], [220.0, 27041.333333333332], [218.0, 17746.0], [216.0, 20047.5], [224.0, 24626.0], [226.0, 18796.25], [230.0, 19575.0], [231.0, 22121.0], [229.0, 23373.0], [228.0, 25253.0], [227.0, 15049.0], [225.0, 13978.0], [233.0, 21300.6], [237.0, 17831.0], [239.0, 19320.5], [238.0, 30840.0], [236.0, 29101.5], [235.0, 20127.0], [234.0, 21757.0], [232.0, 21957.666666666668], [242.0, 22818.5], [243.0, 21695.5], [245.0, 18282.777777777777], [244.0, 21857.0], [247.0, 23584.0], [246.0, 20887.666666666664], [241.0, 21526.0], [240.0, 22245.0], [248.0, 18813.5], [249.0, 16948.714285714286], [251.0, 16069.75], [253.0, 18942.55555555556], [254.0, 20111.333333333332], [255.0, 16531.555555555555], [252.0, 22632.0], [250.0, 17178.0], [256.0, 19437.333333333332], [1.0, 63764.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[150.07500000000002, 18625.78333333332]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 256.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 224.2, "minX": 1.6913217E12, "maxY": 1120483.3666666667, "series": [{"data": [[1.69132176E12, 1120483.3666666667], [1.6913217E12, 275429.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69132176E12, 912.0], [1.6913217E12, 224.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69132176E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6635.78813559322, "minX": 1.6913217E12, "maxY": 21561.093360995856, "series": [{"data": [[1.69132176E12, 21561.093360995856], [1.6913217E12, 6635.78813559322]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69132176E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1173.3389830508474, "minX": 1.6913217E12, "maxY": 3065.684647302907, "series": [{"data": [[1.69132176E12, 3065.684647302907], [1.6913217E12, 1173.3389830508474]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69132176E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 688.1949152542373, "minX": 1.6913217E12, "maxY": 1750.236514522821, "series": [{"data": [[1.69132176E12, 1750.236514522821], [1.6913217E12, 688.1949152542373]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69132176E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 596.0, "minX": 1.6913217E12, "maxY": 64448.0, "series": [{"data": [[1.69132176E12, 64448.0], [1.6913217E12, 15265.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69132176E12, 596.0], [1.6913217E12, 1379.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69132176E12, 34270.30000000001], [1.6913217E12, 11929.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69132176E12, 54531.74999999999], [1.6913217E12, 15248.47]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69132176E12, 20261.0], [1.6913217E12, 6248.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69132176E12, 41372.89999999999], [1.6913217E12, 12826.6]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69132176E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2161.0, "minX": 1.0, "maxY": 24218.0, "series": [{"data": [[8.0, 17554.0], [2.0, 8999.5], [9.0, 15219.5], [10.0, 22510.0], [11.0, 21674.5], [3.0, 2161.0], [12.0, 23261.0], [13.0, 21681.0], [14.0, 18101.5], [15.0, 22482.0], [4.0, 14148.0], [1.0, 12823.0], [16.0, 24218.0], [17.0, 19336.0], [18.0, 8229.5], [5.0, 11013.0], [6.0, 8644.0], [24.0, 13307.0], [7.0, 21120.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 21026.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3500.0, "series": [{"data": [[8.0, 1476.5], [2.0, 1903.5], [9.0, 1445.5], [10.0, 2194.0], [11.0, 1487.5], [3.0, 321.0], [12.0, 1473.5], [13.0, 2092.5], [14.0, 1447.0], [15.0, 1441.0], [4.0, 1453.5], [1.0, 513.0], [16.0, 3500.0], [17.0, 1267.0], [18.0, 490.0], [5.0, 1428.0], [6.0, 1433.0], [24.0, 504.5], [7.0, 1449.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.7, "minX": 1.6913217E12, "maxY": 5.3, "series": [{"data": [[1.69132176E12, 4.7], [1.6913217E12, 5.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69132176E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6913217E12, "maxY": 8.0, "series": [{"data": [[1.69132176E12, 8.0], [1.6913217E12, 1.9666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69132176E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69132176E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6913217E12, "maxY": 8.0, "series": [{"data": [[1.69132176E12, 8.0], [1.6913217E12, 1.9666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69132176E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69132176E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6913217E12, "maxY": 8.0, "series": [{"data": [[1.69132176E12, 8.0], [1.6913217E12, 1.9666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69132176E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69132176E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

